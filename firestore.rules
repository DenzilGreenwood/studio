
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user owns the resource
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Enhanced helper function to check admin role
    function isAdmin() {
      return request.auth != null && 
             request.auth.token.admin == true;
    }

    // Enhanced helper function to check user role
    function hasRole(role) {
      return request.auth != null && 
             request.auth.token.role == role;
    }

    // Enhanced helper function to check permissions
    function hasPermission(permission) {
      return request.auth != null && 
             request.auth.token.permissions != null &&
             permission in request.auth.token.permissions;
    }

    // Helper function to validate recovery blob structure per v1.1.2 white paper
    function isValidRecoveryBlob(data) {
      return data.keys().hasAll(['encryptedPassphrase', 'salt', 'iv', 'iterations', 'version']) &&
             data.encryptedPassphrase is string &&
             data.salt is string &&
             data.iv is string &&
             data.iterations is number &&
             data.iterations >= 100000 &&  // Enforce minimum PBKDF2 iterations
             data.version is string &&
             data.version == '1.1.2';       // Enforce current white paper version
    }

    // Helper function to validate encryption metadata for user data
    function isValidEncryptionMetadata(data) {
      return data.keys().hasAll(['salt', 'iv', 'version']) &&
             data.salt is string &&
             data.iv is string &&
             data.version is string &&
             data.version == '1.1.2';
    }

    // Helper function to check if data contains only encrypted fields
    function isEncryptedData(data) {
      return data.keys().hasAll(['encryptedData', 'metadata']) &&
             data.encryptedData is string &&
             isValidEncryptionMetadata(data.metadata);
    }

    // Helper function to validate feedback structure per v1.0.0 spec
    function isValidFeedback(data) {
      return data.keys().hasAll(['userId', 'rating', 'createdAt']) &&
             data.userId is string &&
             data.rating is number &&
             data.rating >= 1 &&
             data.rating <= 5 &&
             data.createdAt is timestamp &&
             // Optional fields validation
             (!data.keys().hasAny(['message']) || data.message is string) &&
             (!data.keys().hasAny(['pageContext']) || data.pageContext is string) &&
             (!data.keys().hasAny(['version']) || data.version is string);
    }

    // Deny all reads and writes by default
    match /{document=**} {
      allow read, write: if false;
    }

    match /users/{userId} {
      allow read, update, create, delete: if isOwner(userId);
      allow read: if isAdmin() || hasPermission('read:all:users');
      allow update: if isAdmin() && hasPermission('manage:users');
    }

    match /users/{userId}/recovery/{recoveryId} {
      allow read, create, update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    match /users/{userId}/sessions/{sessionId} {
      allow read, write, delete: if isOwner(userId);
    }

    match /users/{userId}/sessionReports/{sessionReportId} {
      allow read, write, delete: if isOwner(userId);
    }

    match /users/{userId}/journals/{journalId} {
      allow read, delete: if isOwner(userId);
      allow create, update: if isOwner(userId) && 
                            isEncryptedData(request.resource.data);
    }

    match /users/{userId}/journals/{journalId}/messages/{messageId} {
      allow read, write, delete: if isOwner(userId);
    }

    match /clarityMaps/{clarityMapId} {
      allow read, write, delete: if request.auth != null && 
                                  resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && 
                    request.resource.data.userId == request.auth.uid;
    }

    match /insightReports/{insightReportId} {
      allow read, write, delete: if request.auth != null && 
                                  resource.data.userId == request.auth.uid;
      allow create: if request.auth != null && 
                    request.resource.data.userId == request.auth.uid;
    }

    match /users/{userId}/clean-reports/{reportId} {
      allow read, write, delete: if isOwner(userId);
    }

    match /users/{userId}/sessions/{sessionId}/messages/{messageId} {
      allow read, write, delete: if isOwner(userId);
    }

    match /feedback/{feedbackId} {
      allow create: if request.auth != null;
      allow delete: if request.auth != null &&
                    resource.data.userId == request.auth.uid;
      allow read: if request.auth != null &&
                  request.auth.token.admin == true;
      allow update: if false;
    }

    match /system/userCount {
      allow read: if true;
      allow write, create, update: if true;
    }
  }
}
