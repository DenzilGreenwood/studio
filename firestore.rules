rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
             request.auth.uid != null &&
             (
               // Hardcoded admin UIDs (fallback admin access)
               request.auth.uid == "dgVSNzYT7SbsoOiIKWjBP0YJkUw2" ||
               // Database-based admin check
               (exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
                get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdmin == true)
             );
    }

    // Helper function to check if user owns the resource
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Deny all reads and writes by default.
    match /{document=**} {
      allow read, write: if false;
    }

    // USERS
    // Allow users to read, update, create, and delete their own profile.
    // Allow admins to read all user profiles.
    match /users/{userId} {
      allow read, update, create, delete: if isOwner(userId);
      allow read: if isAdmin();
    }

    // SESSIONS
    // Allow users to manage their own session documents.
    // Allow admins to read all sessions.
    match /users/{userId}/sessions/{sessionId} {
      allow read, write, delete: if isOwner(userId);
      allow read: if isAdmin();
    }

    // REPORTS (New architecture)
    // Allow users to manage their own session reports.
    // Allow admins to read all reports.
    match /users/{userId}/reports/{reportId} {
      allow read, write, delete: if isOwner(userId);
      allow read: if isAdmin();
    }

    // JOURNALS (New architecture)
    // Allow users to manage their own journal entries.
    // Allow admins to read all journals.
    match /users/{userId}/journals/{journalId} {
      allow read, write, delete: if isOwner(userId);
      allow read: if isAdmin();
    }

    // CLEAN REPORTS (New clean architecture)
    // Allow users to manage their own clean session reports.
    // Allow admins to read all clean reports.
    match /users/{userId}/clean-reports/{reportId} {
      allow read, write, delete: if isOwner(userId);
      allow read: if isAdmin();
    }

    // COLLECTION GROUP QUERIES
    // Allow admins to query sessions across all users (for admin dashboard)
    match /{path=**}/sessions/{sessionId} {
      allow read: if isAdmin();
    }

    // MESSAGES
    // Allow users to manage messages within their own sessions.
    // Allow admins to read all messages.
    match /users/{userId}/sessions/{sessionId}/messages/{messageId} {
      allow read, write, delete: if isOwner(userId);
      allow read: if isAdmin();
    }

    // FEEDBACK
    // Allow any authenticated user to submit (create) feedback.
    // Allow users to delete their own feedback (for account deletion).
    // Allow admins to read all feedback for analysis.
    // Prevent regular users from reading or updating other users' feedback.
    match /feedback/{feedbackId} {
      allow create: if request.auth != null;
      allow delete: if request.auth != null && 
                    exists(/databases/$(database)/documents/feedback/$(feedbackId)) &&
                    get(/databases/$(database)/documents/feedback/$(feedbackId)).data.userId == request.auth.uid;
      allow read: if isAdmin();
      allow update: if false;
    }

    // SYSTEM
    // Allow reading user count for signup validation (no auth required for checking signup limits)
    // Allow writing to increment user count during signup (requires auth)
    match /system/userCount {
      allow read: if true; // Allow anyone to check user count
      allow update, create: if request.auth != null; // Only authenticated users can update
    }
  }
}
